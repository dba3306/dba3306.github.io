<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[快速搭建innodb cluster 集群]]></title>
      <url>/%E8%BF%90%E7%BB%B4/mysql/2020/04/22/mac%E4%B8%8A%E7%94%A8dbdeploy%E9%83%A8%E7%BD%B2MiC%E9%9B%86%E7%BE%A4/</url>
      <content type="text"><![CDATA[用dbdeployer 部署3个单节点dbdeployer deploy multiple 5.7 -n 3查看节点状态dbdeployer sandboxes --full-info.------------------.----------.---------.-----------.----------------------.--------.-------.--------.|       name       |   type   | version |   host    |         port         | flavor | nodes | locked |+------------------+----------+---------+-----------+----------------------+--------+-------+--------+| multi_msb_5_7_29 | multiple | 5.7.29  | 127.0.0.1 | [24630 24631 24632 ] | mysql  |     3 |        |'------------------'----------'---------'-----------'----------------------'--------'-------'--------'dbdeployer global status# Running "status_all" on multi_msb_5_7_29MULTIPLE  /Users/qianyin/sandboxes/multi_msb_5_7_29node1 : node1 on  -  port       24630 (24630)node2 : node2 on  -  port       24631 (24631)node3 : node3 on  -  port       24632 (24632)下载MySQL-Shellwget https://dev.mysql.com/get/Downloads/MySQL-Shell/mysql-shell-8.0.19-macos10.15-x86-64bit.tar.gz解压后进入mysql shell 目录bin目录下就3个文件-rwxr-xr-x@ 1 qianyin  staff    633256 12 17 09:42 mysql-secret-store-keychain*-rwxr-xr-x@ 1 qianyin  staff   7957420 12 17 09:42 mysql-secret-store-login-path*-rwxr-xr-x@ 1 qianyin  staff  31067132 12 17 09:42 mysqlsh*我们运行mysqlsh可以先打\help 看下帮助提示可以看到支持的模块如下： - dba    Used for InnoDB cluster administration. - mysql  Support for connecting to MySQL servers using the classic MySQL          protocol. - mysqlx Used to work with X Protocol sessions using the MySQL X DevAPI. - os     Gives access to functions which allow to interact with the operating          system. - shell  Gives access to general purpose functions and properties. - sys    Gives access to system specific parameters. - util   Global object that groups miscellaneous tools like upgrade checker          and JSON import.部署集群我们需要用到dba功能，再查看dba的帮助信息\? dba正式配置集群检查并配置3个数据库实例mysql-js&gt; \connect root@localhost:24630 MySQL  localhost:24630 ssl  JS &gt; dba.configureLocalInstance()Configuring local MySQL instance listening at port 24630 for use in an InnoDB cluster...This instance reports its own address as node-1:24630ERROR: User 'root' can only connect from 'localhost'. New account(s) with proper source address specification to allow remote connection from all instances must be created to manage the cluster.1) Create remotely usable account for 'root' with same grants and password2) Create a new admin account for InnoDB cluster with minimal required grants3) Ignore and continue4) CancelPlease select an option [1]: Please provide a source address filter for the account (e.g: 192.168.% or % etc) or leave empty and press Enter to cancel.Account Host: %NOTE: Some configuration options need to be fixed:+----------------------------------+---------------+----------------+------------------------------------------------+| Variable                         | Current Value | Required Value | Note                                           |+----------------------------------+---------------+----------------+------------------------------------------------+| binlog_checksum                  | CRC32         | NONE           | Update the server variable and the config file || enforce_gtid_consistency         | OFF           | ON             | Update the config file and restart the server  || gtid_mode                        | OFF           | ON             | Update the config file and restart the server  || log_slave_updates                | OFF           | ON             | Update the config file and restart the server  || master_info_repository           | FILE          | TABLE          | Update the config file and restart the server  || relay_log_info_repository        | FILE          | TABLE          | Update the config file and restart the server  || transaction_write_set_extraction | OFF           | XXHASH64       | Update the config file and restart the server  |+----------------------------------+---------------+----------------+------------------------------------------------+Some variables need to be changed, but cannot be done dynamically on the server: an option file is required.Detecting the configuration file...Default file not found at the standard locations.Please specify the path to the MySQL configuration file: /Users/qianyin/sandboxes/multi_msb_5_7_29/node1/my.sandbox.cnfDo you want to perform the required configuration changes? [y/n]: yCluster admin user 'root'@'%' created.Configuring instance...The instance 'node-1:24630' was configured to be used in an InnoDB cluster.NOTE: MySQL server needs to be restarted for configuration changes to take effect.依次修改另外2个节点查看my.cnf 会发现在文件末尾添加了如下配置：binlog_checksum = NONEenforce_gtid_consistency = ONgtid_mode = ONlog_slave_updates = ONmaster_info_repository = TABLErelay_log_info_repository = TABLEtransaction_write_set_extraction = XXHASH64配置完后，检查下MySQL  localhost:24630 ssl  JS &gt; dba.checkInstanceConfiguration('root@localhost:24631')Validating local MySQL instance listening at port 24631 for use in an InnoDB cluster...This instance reports its own address as node-2:24631Checking whether existing tables comply with Group Replication requirements...No incompatible tables detectedChecking instance configuration...Instance configuration is compatible with InnoDB clusterThe instance 'node-2:24631' is valid to be used in an InnoDB cluster.{    "status": "ok"}3个节点都显示”status”: “ok” 即可。创建集群 MySQL  localhost:24630 ssl  JS &gt; var cluster = dba.createCluster('testCluster',{'localAddress':'localhost:25630'})A new InnoDB cluster will be created on instance 'localhost:24630'.Disabling super_read_only mode on instance 'node-1:24630'.Validating instance configuration at localhost:24630...This instance reports its own address as node-1:24630Instance configuration is suitable.WARNING: Instance 'node-1:24630' cannot persist Group Replication configuration since MySQL version 5.7.29 does not support the SET PERSIST command (MySQL version &gt;= 8.0.11 required). Please use the &lt;Dba&gt;.configureLocalInstance() command locally to persist the changes.Creating InnoDB cluster 'testCluster' on 'node-1:24630'...Adding Seed Instance...Cluster successfully created. Use Cluster.addInstance() to add MySQL instances.At least 3 instances are needed for the cluster to be able to withstand up toone server failure.Adding Instances to an InnoDB Cluster**注意：先配置/etc/hosts **127.0.0.1 node-1127.0.0.1 node-2127.0.0.1 node-3否则报错： MySQL  127.0.0.1:24630 ssl  JS &gt; cluster.addInstance('root@localhost:24631',{'localAddress':'localhost:25631'})Cluster.addInstance: Unknown MySQL server host 'node-1' (0) (MySQL Error 2005)添加集群节点 MySQL  localhost:24630 ssl  JS &gt; cluster.addInstance('root@localhost:24631',{'localAddress':'localhost:25631'})NOTE: The target instance 'node-2:24631' has not been pre-provisioned (GTID set is empty). The Shell is unable to decide whether incremental state recovery can correctly provision it.The safest and most convenient way to provision a new instance is through automatic clone provisioning, which will completely overwrite the state of 'node-2:24631' with a physical snapshot from an existing cluster member. To use this method by default, set the 'recoveryMethod' option to 'clone'.The incremental state recovery may be safely used if you are sure all updates ever executed in the cluster were done with GTIDs enabled, there are no purged transactions and the new instance contains the same GTID set as the cluster or a subset of it. To use this method by default, set the 'recoveryMethod' option to 'incremental'.Please select a recovery method [I]ncremental recovery/[A]bort (default Incremental recovery): Validating instance configuration at localhost:24631...This instance reports its own address as node-2:24631Instance configuration is suitable.WARNING: Instance 'node-2:24631' cannot persist Group Replication configuration since MySQL version 5.7.29 does not support the SET PERSIST command (MySQL version &gt;= 8.0.11 required). Please use the &lt;Dba&gt;.configureLocalInstance() command locally to persist the changes.A new instance will be added to the InnoDB cluster. Depending on the amount ofdata on the cluster this might take from a few seconds to several hours.Adding instance to the cluster...Monitoring recovery process of the new cluster member. Press ^C to stop monitoring and let it continue in background.State recovery already finished for 'node-2:24631'WARNING: Instance 'node-1:24630' cannot persist configuration since MySQL version 5.7.29 does not support the SET PERSIST command (MySQL version &gt;= 8.0.11 required). Please use the &lt;Dba&gt;.configureLocalInstance() command locally to persist the changes.The instance 'localhost:24631' was successfully added to the cluster.     MySQL  localhost:24630 ssl  JS &gt; cluster.addInstance('root@localhost:24632',{'localAddress':'localhost:25632'})NOTE: The target instance 'node-3:24632' has not been pre-provisioned (GTID set is empty). The Shell is unable to decide whether incremental state recovery can correctly provision it.The safest and most convenient way to provision a new instance is through automatic clone provisioning, which will completely overwrite the state of 'node-3:24632' with a physical snapshot from an existing cluster member. To use this method by default, set the 'recoveryMethod' option to 'clone'.The incremental state recovery may be safely used if you are sure all updates ever executed in the cluster were done with GTIDs enabled, there are no purged transactions and the new instance contains the same GTID set as the cluster or a subset of it. To use this method by default, set the 'recoveryMethod' option to 'incremental'.Please select a recovery method [I]ncremental recovery/[A]bort (default Incremental recovery): Validating instance configuration at localhost:24632...This instance reports its own address as node-3:24632Instance configuration is suitable.WARNING: Instance 'node-3:24632' cannot persist Group Replication configuration since MySQL version 5.7.29 does not support the SET PERSIST command (MySQL version &gt;= 8.0.11 required). Please use the &lt;Dba&gt;.configureLocalInstance() command locally to persist the changes.A new instance will be added to the InnoDB cluster. Depending on the amount ofdata on the cluster this might take from a few seconds to several hours.Adding instance to the cluster...Monitoring recovery process of the new cluster member. Press ^C to stop monitoring and let it continue in background.State recovery already finished for 'node-3:24632'WARNING: Instance 'node-1:24630' cannot persist configuration since MySQL version 5.7.29 does not support the SET PERSIST command (MySQL version &gt;= 8.0.11 required). Please use the &lt;Dba&gt;.configureLocalInstance() command locally to persist the changes.WARNING: Instance 'node-2:24631' cannot persist configuration since MySQL version 5.7.29 does not support the SET PERSIST command (MySQL version &gt;= 8.0.11 required). Please use the &lt;Dba&gt;.configureLocalInstance() command locally to persist the changes.The instance 'localhost:24632' was successfully added to the cluster.查看cluster 状态 MySQL  localhost:24630 ssl  JS &gt; cluster.status(){    "clusterName": "testCluster",     "defaultReplicaSet": {        "name": "default",         "primary": "node-1:24630",         "ssl": "REQUIRED",         "status": "OK",         "statusText": "Cluster is ONLINE and can tolerate up to ONE failure.",         "topology": {            "node-1:24630": {                "address": "node-1:24630",                 "mode": "R/W",                 "readReplicas": {},                 "role": "HA",                 "status": "ONLINE"            },             "node-2:24631": {                "address": "node-2:24631",                 "mode": "R/O",                 "readReplicas": {},                 "role": "HA",                 "status": "ONLINE"            },             "node-3:24632": {                "address": "node-3:24632",                 "mode": "R/O",                 "readReplicas": {},                 "role": "HA",                 "status": "ONLINE"            }        },         "topologyMode": "Single-Primary"    },     "groupInformationSourceMember": "node-1:24630"安装MySQL router待补充模拟单节点重启关闭节点./node2/stopdbdeployer global status# Running "status_all" on multi_msb_5_7_29MULTIPLE  /Users/qianyin/sandboxes/multi_msb_5_7_29node1 : node1 on  -  port       24630 (24630)node2 : node2 off  -  port      24630 (24631)node3 : node3 on  -  port       24632 (24632)集群状态 MySQL  localhost:6447 ssl  JS &gt; dba.getCluster().status(){    "clusterName": "testCluster",     "defaultReplicaSet": {        "name": "default",         "primary": "node-1:24630",         "ssl": "REQUIRED",         "status": "OK_NO_TOLERANCE",         "statusText": "Cluster is NOT tolerant to any failures. 1 member is not active",         "topology": {            "node-1:24630": {                "address": "node-1:24630",                 "mode": "R/W",                 "readReplicas": {},                 "role": "HA",                 "status": "ONLINE"            },             "node-2:24631": {                "address": "node-2:24631",                 "mode": "n/a",                 "readReplicas": {},                 "role": "HA",                 "shellConnectError": "MySQL Error 2003 (HY000): Can't connect to MySQL server on 'node-2' (61)",                 "status": "(MISSING)"            },             "node-3:24632": {                "address": "node-3:24632",                 "mode": "R/O",                 "readReplicas": {},                 "role": "HA",                 "status": "ONLINE"            }        },         "topologyMode": "Single-Primary"    },     "groupInformationSourceMember": "node-1:24630"}启动节点&gt; ./node2/start.. sandbox server started&gt; dbdeployer global status# Running "status_all" on multi_msb_5_7_29MULTIPLE  /Users/qianyin/sandboxes/multi_msb_5_7_29node1 : node1 on  -  port       24630 (24630)node2 : node2 on  -  port       24631 (24631)node3 : node3 on  -  port       24632 (24632)查看集群状态 MySQL  localhost:6447 ssl  JS &gt; dba.getCluster().status(){    "clusterName": "testCluster",     "defaultReplicaSet": {        "name": "default",         "primary": "node-1:24630",         "ssl": "REQUIRED",         "status": "OK_NO_TOLERANCE",         "statusText": "Cluster is NOT tolerant to any failures. 1 member is not active",         "topology": {            "node-1:24630": {                "address": "node-1:24630",                 "mode": "R/W",                 "readReplicas": {},                 "role": "HA",                 "status": "ONLINE"            },             "node-2:24631": {                "address": "node-2:24631",                 "mode": "R/W",                 "readReplicas": {},                 "role": "HA",                 "status": "(MISSING)"            },             "node-3:24632": {                "address": "node-3:24632",                 "mode": "R/O",                 "readReplicas": {},                 "role": "HA",                 "status": "ONLINE"            }        },         "topologyMode": "Single-Primary"    },     "groupInformationSourceMember": "node-1:24630"修复cluster.removeInstance('root@localhost:24631',{force: true})  #这一步可能会失败，多尝试几次cluster.addInstance('root@localhost:24631',{'localAddress':'localhost:25631'})常用运维命令  组复制状态          select * from performance_schema.global_status where variable_name like '%group%';        组复制成员          select * from performance_schema.replication_group_members;      所有节点重启，脑裂场景参考如下https://jeremyxu2010.github.io/2019/05/mysql-innodb-cluster%E5%AE%9E%E6%88%98/]]></content>
      <categories>
        
          <category> 运维 </category>
        
          <category> MySQL </category>
        
      </categories>
      <tags>
        
          <tag> innodb_cluster </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[mongodb writeConcern初探]]></title>
      <url>/mongodb/2020/04/20/mongodb-writeConcern/</url>
      <content type="text"><![CDATA[什么是writeConcernwriteConcern 决定一个写操作落到多少个节点上才算成功。取值包括：  0 ：发起写操作，不关心是否成功。  1~集群最大节点数 ：写操作需要复制到指定节点数才算成功  majority：写操作需要复制到多数节点才算成功发起写操作的程序将阻塞直到满足上诉条件。  writeConcern类似MySQL的半同步复制--rpl-semi-sync-master-wait-for-slave-count这里还要提到另一个概念：Journal 日志，跟MySQL的redo log类似，也是为了做crash safe。为了保证每次写数据都落盘，可以指定j: true注：3.2之前只要primary节点落盘就确认ok，3.2之后需要w:N都确认才okwriteConcern功能验证w: “majority”rs0:PRIMARY&gt; db.test.insert( {count: 1}, {writeConcern: {w: "majority"}})WriteResult({ "nInserted" : 1 })这是推荐的写法，mongodb会自己判断只要写入多数节点即返回成功w: 节点数rs0:PRIMARY&gt; db.test.insert( {count: 1}, {writeConcern: {w: 3 }})WriteResult({ "nInserted" : 1 })可以看到正常情况下（secondary节点没延迟）也很快返回成功了。w＞节点数rs0:PRIMARY&gt; db.test.insert( {count: 1}, {writeConcern: {w: 4}})WriteResult({        "nInserted" : 1,        "writeConcernError" : {                "code" : 100,                "codeName" : "UnsatisfiableWriteConcern",                "errmsg" : "Not enough data-bearing nodes"        }})这里虽然报错了，但实际还是写入成功了。secondary节点有延迟的情况下，观察现象首先我们模拟延迟场景，在primary节点执行，模拟secondary 2节点延迟10秒conf=rs.conf() conf.members[2].slaveDelay = 10conf.members[2].priority = 0 rs.reconfig(conf)观察复制延迟下的写入，以及timeout参数db.test.insert( {count: 1}, {writeConcern: {w: 3}})rs0:PRIMARY&gt; db.test.find(){ "_id" : ObjectId("5e9d7bf6d4eb493af10599c9"), "count" : 1 }{ "_id" : ObjectId("5e9d7cf4d4eb493af10599ca"), "count" : 1 }{ "_id" : ObjectId("5e9d7e2ad4eb493af10599cb"), "count" : 1 }rs0:PRIMARY&gt; db.test.insert( {count: 1}, {writeConcern: {w: 3}})# 这里会等待10sWriteResult({ "nInserted" : 1 })rs0:PRIMARY&gt; db.test.find(){ "_id" : ObjectId("5e9d7bf6d4eb493af10599c9"), "count" : 1 }{ "_id" : ObjectId("5e9d7cf4d4eb493af10599ca"), "count" : 1 }{ "_id" : ObjectId("5e9d7e2ad4eb493af10599cb"), "count" : 1 }{ "_id" : ObjectId("5e9d7f9ad4eb493af10599cc"), "count" : 1 }db.test.insert( {count: 1}, {writeConcern: {w: 3, wtimeout:3000 }})rs0:PRIMARY&gt; db.test.find(){ "_id" : ObjectId("5e9d7bf6d4eb493af10599c9"), "count" : 1 }{ "_id" : ObjectId("5e9d7cf4d4eb493af10599ca"), "count" : 1 }{ "_id" : ObjectId("5e9d7e2ad4eb493af10599cb"), "count" : 1 }{ "_id" : ObjectId("5e9d7f9ad4eb493af10599cc"), "count" : 1 }rs0:PRIMARY&gt; db.test.insert( {count: 1}, {writeConcern: {w: 3, wtimeout:3000 }})# 这里等3s后报错，实际命令敲下的一瞬间已写入到primary和没延迟的secondary，延迟节点需要等10s后落盘。WriteResult({        "nInserted" : 1,        "writeConcernError" : {                "code" : 64,                "codeName" : "WriteConcernFailed",                "errmsg" : "waiting for replication timed out",                "errInfo" : {                        "wtimeout" : true                }        }})rs0:PRIMARY&gt; db.test.find(){ "_id" : ObjectId("5e9d7bf6d4eb493af10599c9"), "count" : 1 }{ "_id" : ObjectId("5e9d7cf4d4eb493af10599ca"), "count" : 1 }{ "_id" : ObjectId("5e9d7e2ad4eb493af10599cb"), "count" : 1 }{ "_id" : ObjectId("5e9d7f9ad4eb493af10599cc"), "count" : 1 }{ "_id" : ObjectId("5e9d800ed4eb493af10599cd"), "count" : 1 }总结  虽然多于半数的writeConcern都是安全的，但通常只会设置majority，因为这是等待写入延迟时间最短的选择;  不要设置writeConcern等于总节点数，因为一旦有一个节点故障，所有写操作都将失败;  writeConcern虽然会增加写操作延迟时间，但并不会显著增加集群压力，因此无论是否等待，写操作最终都会复制到所有节点上。设置 writeConcern 只是让写操作等待复制后再返回而已;  应对重要数据应用{w:“majority”}，普通数据可以应用{w:1}以确保最佳性能。]]></content>
      <categories>
        
          <category> mongodb </category>
        
      </categories>
      <tags>
        
          <tag> mongodb </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[mongodb复制集环境搭建]]></title>
      <url>/mongodb/2020/04/20/mongo_replset_building/</url>
      <content type="text"><![CDATA[  目标：在mac上部署3个节点的复制集，为后续测试准备环境创建目录：mkdir -p /data/mongodb/db{1,2,3}编辑配置文件：cat /data/mongodb/db1/mongod.conf systemLog:    destination: file    path: /data/mongodb/db1/mongod.log    logAppend: truestorage:    dbPath: /data/mongodb/db1net:    bindIp: 0.0.0.0    port: 28017replication:    replSetName: rs0processManagement:    fork: true  其他节点只需修改path和port即可启动mongod：mongod -f /data/db1/mongod.conf配置复制集：mongo --port 28017  方法一&gt; rs.initiate()&gt; rs.add("HOSTNAME:28018") &gt; rs.add("HOSTNAME:28019")  方法二mongo --port 28017&gt; rs.initiate({    _id: "rs0",    members: [    {_id: 0,host: "localhost:28017" },    {_id: 1,host: "localhost:28018" },    {_id: 2,host: "localhost:28019" }    ]})验证  MongoDB 主节点进行写入mongo localhost:28017&gt; db.test.insert({ a:1 })&gt; db.test.insert({ a:2 });  MongoDB 从节点进行读mongo localhost:28018&gt; rs.slaveOk()&gt; db.test.find()]]></content>
      <categories>
        
          <category> mongodb </category>
        
      </categories>
      <tags>
        
          <tag> mongodb </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[一些运维常用的SQL]]></title>
      <url>/%E8%BF%90%E7%BB%B4/mysql/2020/04/18/mysql_sql/</url>
      <content type="text"><![CDATA[delete from xxx order by xxx limit xx,xx;背景：执行如下sqlDELETE FROM table WHERE type = 'test' ORDER BY id DESC LIMIT 30, 60;报错：#1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ' 60' at line 1解决：DELETE FROM tableWHERE ID IN        (        SELECT ID        FROM            (                SELECT ID                FROM table                WHERE Type = 'TEST'                ORDER BY ID                LIMIT 30,60            ) a        )mysqlbinlog  查看mysqlbinlog -vv --base64-output=decode-rows  binlogfile  恢复mysqlbinlog master.000001  --start-position=2738 --stop-position=2973 | mysql -h127.0.0.1 -P13000 -u$user -p$pwd;统计包含某列的所有表select TABLE_SCHEMA,TABLE_NAME,group_concat(COLUMN_NAME,' ',COLUMN_DEFAULT,' ',EXTRA Separator ',') from information_schema.columns where TABLE_SCHEMA IN ( 'iccs_loan', 'opr','stdcmp','saas' ) and COLUMN_NAME in ('sync_insTime','sync_lastUptTime') group by TABLE_SCHEMA,TABLE_NAME;统计非法字符集和排序的表select TABLE_schema,TABLE_NAME,group_concat(concat_ws('/',COLUMN_NAME,CHARACTER_SET_NAME,COLLATION_NAME)) as `sql` from information_schema.columns where TABLE_SCHEMA IN ( 'iccs_loan', 'opr','stdcmp','saas' ) and (CHARACTER_SET_NAME !="utf8mb4" or COLLATION_NAME !="utf8mb4_bin") group by TABLE_schema,TABLE_NAME\G修改表字符集alter table xxx modify xxx varchar(xxx) NOT NULL collate utf8mb4_bin COMMENT 'xxx';快速查看processlistmysqladmin --login-path=qaroot pr|grep -v Sleep时间相关  一小时前CREATE_TIME &lt; (UNIX_TIMESTAMP(DATE_ADD(NOW(),INTERVAL -1 HOUR))*1000);  3小时前(后)TIMESTAMPDIFF(hour,FROM_UNIXTIME( UPDATE_TIME / 1000, '%Y-%m-%d %T' ),NOW()) &gt; 3mysqldumpmysqldump -u root -p --all --single-transaction --triggers --routines --events &gt;/data/dbbackup/full_backup.sql]]></content>
      <categories>
        
          <category> 运维 </category>
        
          <category> MySQL </category>
        
      </categories>
      <tags>
        
          <tag> 运维 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[用innobackupex实现加密备份]]></title>
      <url>/mysql/2020/04/18/innobackupex_encrypt/</url>
      <content type="text"><![CDATA[安装innobackupexyum install https://repo.percona.com/yum/percona-release-latest.noarch.rpmyum install percona-xtrabackup-24MySQL创建备份用户GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'xbackupopr'@'%' IDENTIFIED BY 'UFfrBrtyv_cxR50C';生成encrypt-key（可不执行，直接用脚本中的key）openssl enc -aes-256-cbc -pass pass:Password -P -md sha1 | grep iv | cut -d'=' -f2 脚本#!/usr/bin/python#coding:UTF-8import os,time,sys,commandsinnobackupex = '/usr/bin/innobackupex'# 全备函数def full_backup(host, port, user, password, full_backup_dir,week_of_dir, backup_log):    os.system("%s --host=%s --port=%s --user=%s --password=%s --encrypt=AES256 --encrypt-key=CCD0C542F643163CBF4734362FC917C7 --extra-lsndir=%s --no-timestamp %s &gt; %s 2&gt;&amp;1" %(innobackupex,host, port, user, password, week_of_dir,full_backup_dir, backup_log))# 增备函数def incr_backup(host, port, user, password, incr_backup_dir, incremental_lsn,extra_lsndir,backup_log):    os.system("%s --incremental %s  --incremental-lsn=%s --host=%s --port=%s --user=%s --password=%s  --extra-lsndir=%s --encrypt=AES256 --encrypt-key=CCD0C542F643163CBF4734362FC917C7 &gt; %s 2&gt;&amp;1" %(innobackupex,incr_backup_dir,incremental_lsn,host,port,user,password,extra_lsndir,backup_log))# 主函数if __name__ == '__main__':    host = "127.0.0.1"    port = '3306'    user = 'xbackupopr'    password = 'UFfrBrtyv_cxR50C'    backup_dir = '/data/backup/'    defaults_file = '/data/my3306/my.cnf'    wday = time.localtime().tm_wday    week_of_dir = backup_dir + time.strftime("%U", time.localtime())    full_backup_dir = week_of_dir + '/full'    backup_log = "/tmp/backup.log"    # 增备寻找最新的上一次备份的基准目录    base_backup_dir = commands.getoutput('find ' + week_of_dir + ' -mindepth 1 -maxdepth 1 -type d -printf "%P\n"  | sort -nr | head -1')     # 获取最新的lsn,xtrabackup_checkpoints文件在每次全备或者增备后会被覆盖    if os.path.exists(week_of_dir + '/xtrabackup_checkpoints'):        incremental_lsn = commands.getoutput('cat ' + week_of_dir + '/xtrabackup_checkpoints| grep to_lsn | cut -d"=" -f2|sed -e "s/^[ ]*//g"')        print(incremental_lsn)    else:        print('xtrabackup_checkpoints not exists.Maybe full_backup progress not running yet.')    # 探测mysql实例是否存活，如果存活继续下面的程序执行，如果不存活则直接退出程序    mysql_stat = commands.getoutput('/bin/netstat -anp|grep ' + port + ' |grep -v unix|wc -l')    if mysql_stat &gt;= 1:        print "mysql实例存活，可进行备份操作！"    else:        print "mysql实例不存在，备份操作终止！"        sys.exit()    # 每周生成一个周备份目录，全备和增备目录都放在此目录下面    if os.path.exists(week_of_dir):        print "周备份目录已经生成，可进行相应的全备或者增量备份"    else:        print "周备份目录未产生，创建周备份目录..."        os.makedirs(week_of_dir)    # 判断是否周日，如果是周日，直接进行全备，如果不是周日，先检查全备是否存在，不存在则进行全备，存在则进行增备    print "备份开始"    if wday == 6:        full_backup(host, port, user, password, full_backup_dir, week_of_dir,backup_log)    else:        if os.path.exists(full_backup_dir):            incr_backup(host, port, user, password, week_of_dir,incremental_lsn,week_of_dir,backup_log)        else:            full_backup(host, port, user, password, full_backup_dir,week_of_dir, backup_log)    print "备份结束，判断备份是否成功"    try:        with open("/tmp/backup.log") as f:            f.seek(-14, 2)            backup_results = f.readline().strip()            if backup_results == "completed OK!":                print "备份成功"            else:                print "备份失败"                except Error:        sys.exit()    # 备份保留4周    os.system("find %s -mindepth 1 -maxdepth 1 -type d -ctime +28 -exec rm -rf  {} \;" %backup_dir) 备份解密innobackupex  --decrypt=AES256 --encrypt-key=CCD0C542F643163CBF4734362FC917C7  /data/backup/42/full/]]></content>
      <categories>
        
          <category> mysql </category>
        
      </categories>
      <tags>
        
          <tag> pt-tools </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
